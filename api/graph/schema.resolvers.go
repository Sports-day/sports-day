package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"sports-day/api/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	user, err := r.UserService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatUserResponse(user), nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthResponse, error) {
	authResponse, err := r.AuthService.Login(ctx, input.Code, input.RedirectURL)
	if err != nil {
		return nil, err
	}
	return authResponse, nil
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.CreateGroupInput) (*model.Group, error) {
	group, err := r.GroupService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (*model.Group, error) {
	group, err := r.GroupService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id string, input model.UpdateGroupInput) (*model.Group, error) {
	group, err := r.GroupService.Update(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// AddGroupUsers is the resolver for the addGroupUsers field.
func (r *mutationResolver) AddGroupUsers(ctx context.Context, id string, input model.UpdateGroupUsersInput) (*model.Group, error) {
	group, err := r.GroupService.AddUsers(ctx, id, input.UserIds)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// RemoveGroupUsers is the resolver for the removeGroupUsers field.
func (r *mutationResolver) RemoveGroupUsers(ctx context.Context, id string, input model.UpdateGroupUsersInput) (*model.Group, error) {
	group, err := r.GroupService.DeleteUsers(ctx, id, input.UserIds)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// CreateSports is the resolver for the createSports field.
func (r *mutationResolver) CreateSports(ctx context.Context, input model.CreateSportsInput) (*model.Sports, error) {
	panic(fmt.Errorf("not implemented: CreateSports - createSports"))
}

// DeleteSports is the resolver for the deleteSports field.
func (r *mutationResolver) DeleteSports(ctx context.Context, id string) (*model.Sports, error) {
	panic(fmt.Errorf("not implemented: DeleteSports - deleteSports"))
}

// UpdateSports is the resolver for the updateSports field.
func (r *mutationResolver) UpdateSports(ctx context.Context, id string, input model.UpdateSportsInput) (*model.Sports, error) {
	panic(fmt.Errorf("not implemented: UpdateSports - updateSports"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.User, 0, len(users))
	for _, user := range users {
		res = append(res, model.FormatUserResponse(user))
	}
	return res, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.UserService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatUserResponse(user), nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user, err := r.AuthService.GetCurrentUser(ctx)
	if err != nil {
		return nil, err
	}
	return model.FormatUserResponse(user), nil
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*model.Group, error) {
	groups, err := r.GroupService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Group, 0, len(groups))
	for _, group := range groups {
		res = append(res, model.FormatGroupResponse(group))
	}
	return res, nil
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*model.Group, error) {
	group, err := r.GroupService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// Sports is the resolver for the sports field.
func (r *queryResolver) Sports(ctx context.Context) ([]*model.Sports, error) {
	panic(fmt.Errorf("not implemented: Sports - sports"))
}

// Sport is the resolver for the sport field.
func (r *queryResolver) Sport(ctx context.Context, id string) (*model.Sports, error) {
	panic(fmt.Errorf("not implemented: Sport - sport"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
