package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"sports-day/api/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	user, err := r.UserService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatUserResponse(user), nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthResponse, error) {
	authResponse, err := r.AuthService.Login(ctx, input.Code, input.RedirectURL)
	if err != nil {
		return nil, err
	}
	return authResponse, nil
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.CreateGroupInput) (*model.Group, error) {
	group, err := r.GroupService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (*model.Group, error) {
	group, err := r.GroupService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id string, input model.UpdateGroupInput) (*model.Group, error) {
	group, err := r.GroupService.Update(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// AddGroupUsers is the resolver for the addGroupUsers field.
func (r *mutationResolver) AddGroupUsers(ctx context.Context, id string, input model.UpdateGroupUsersInput) (*model.Group, error) {
	group, err := r.GroupService.AddUsers(ctx, id, input.UserIds)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// RemoveGroupUsers is the resolver for the removeGroupUsers field.
func (r *mutationResolver) RemoveGroupUsers(ctx context.Context, id string, input model.UpdateGroupUsersInput) (*model.Group, error) {
	group, err := r.GroupService.DeleteUsers(ctx, id, input.UserIds)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// CreateSports is the resolver for the createSports field.
func (r *mutationResolver) CreateSports(ctx context.Context, input model.CreateSportsInput) (*model.Sport, error) {
	sport, err := r.SportService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatSportResponse(sport), nil
}

// DeleteSports is the resolver for the deleteSports field.
func (r *mutationResolver) DeleteSports(ctx context.Context, id string) (*model.Sport, error) {
	sport, err := r.SportService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatSportResponse(sport), nil
}

// UpdateSports is the resolver for the updateSports field.
func (r *mutationResolver) UpdateSports(ctx context.Context, id string, input model.UpdateSportsInput) (*model.Sport, error) {
	sport, err := r.SportService.Update(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatSportResponse(sport), nil
}

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, input model.CreateTeamInput) (*model.Team, error) {
	team, err := r.TeamService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatTeamResponse(team), nil
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, id string) (*model.Team, error) {
	team, err := r.TeamService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatTeamResponse(team), nil
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, id string, input model.UpdateTeamInput) (*model.Team, error) {
	team, err := r.TeamService.Update(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatTeamResponse(team), nil
}

// UpdateTeamUsers is the resolver for the updateTeamUsers field.
func (r *mutationResolver) UpdateTeamUsers(ctx context.Context, id string, input model.UpdateTeamUsersInput) (*model.Team, error) {
	if _, err := r.TeamService.AddUsers(ctx, id, input.AddUserIds); err != nil {
		return nil, err
	}

	if _, err := r.TeamService.DeleteUsers(ctx, id, input.RemoveUserIds); err != nil {
		return nil, err
	}

	team, err := r.TeamService.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	return model.FormatTeamResponse(team), nil
}

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input model.CreateLocationInput) (*model.Location, error) {
	location, err := r.LocationService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatLocationResponse(location), nil
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, id string, input model.UpdateLocationInput) (*model.Location, error) {
	location, err := r.LocationService.Update(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatLocationResponse(location), nil
}

// DeleteLocation is the resolver for the deleteLocation field.
func (r *mutationResolver) DeleteLocation(ctx context.Context, id string) (*model.Location, error) {
	location, err := r.LocationService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatLocationResponse(location), nil
}

// CreateScene is the resolver for the createScene field.
func (r *mutationResolver) CreateScene(ctx context.Context, input model.CreateSceneInput) (*model.Scene, error) {
	scene, err := r.SceneService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatSceneResponse(scene), nil
}

// UpdateScene is the resolver for the updateScene field.
func (r *mutationResolver) UpdateScene(ctx context.Context, id string, input model.UpdateSceneInput) (*model.Scene, error) {
	scene, err := r.SceneService.Update(ctx, id, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatSceneResponse(scene), nil
}

// DeleteScene is the resolver for the deleteScene field.
func (r *mutationResolver) DeleteScene(ctx context.Context, id string) (*model.Scene, error) {
	scene, err := r.SceneService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatSceneResponse(scene), nil
}

// CreateInformation is the resolver for the createInformation field.
func (r *mutationResolver) CreateInformation(ctx context.Context, input model.CreateInformationInput) (*model.Information, error) {
	information, err := r.InformationService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatInformationResponse(information), nil
}

// DeleteInformation is the resolver for the deleteInformation field.
func (r *mutationResolver) DeleteInformation(ctx context.Context, id string) (*model.Information, error) {
	information, err := r.InformationService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatInformationResponse(information), nil
}

// UpdateInformation is the resolver for the updateInformation field.
func (r *mutationResolver) UpdateInformation(ctx context.Context, id string, input model.UpdateInformationInput) (*model.Information, error) {
	information, err := r.InformationService.Update(ctx, input, id)
	if err != nil {
		return nil, err
	}
	return model.FormatInformationResponse(information), nil
}

// CreateCompetition is the resolver for the createCompetition field.
func (r *mutationResolver) CreateCompetition(ctx context.Context, input model.CreateCompetitionInput) (*model.Competition, error) {
	competition, err := r.CompetitionService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatCompetitionResponse(competition), nil
}

// UpdateCompetition is the resolver for the updateCompetition field.
func (r *mutationResolver) UpdateCompetition(ctx context.Context, id string, input model.UpdateCompetitionInput) (*model.Competition, error) {
	competition, err := r.CompetitionService.Update(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatCompetitionResponse(competition), nil
}

// DeleteCompetition is the resolver for the deleteCompetition field.
func (r *mutationResolver) DeleteCompetition(ctx context.Context, id string) (*model.Competition, error) {
	competition, err := r.CompetitionService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatCompetitionResponse(competition), nil
}

// AddCompetitionEntries is the resolver for the addCompetitionEntries field.
func (r *mutationResolver) AddCompetitionEntries(ctx context.Context, id string, input model.UpdateCompetitionEntriesInput) (*model.Competition, error) {
	competition, err := r.CompetitionService.AddEntries(ctx, id, input.TeamIds)
	if err != nil {
		return nil, err
	}
	return model.FormatCompetitionResponse(competition), nil
}

// DeleteCompetitionEntries is the resolver for the deleteCompetitionEntries field.
func (r *mutationResolver) DeleteCompetitionEntries(ctx context.Context, id string, input model.UpdateCompetitionEntriesInput) (*model.Competition, error) {
	competition, err := r.CompetitionService.DeleteEntries(ctx, id, input.TeamIds)
	if err != nil {
		return nil, err
	}
	return model.FormatCompetitionResponse(competition), nil
}

// CreateMatch is the resolver for the createMatch field.
func (r *mutationResolver) CreateMatch(ctx context.Context, input model.CreateMatchInput) (*model.Match, error) {
	match, err := r.MatchService.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return model.FormatMatchResponse(match), nil
}

// UpdateMatchDetail is the resolver for the updateMatchDetail field.
func (r *mutationResolver) UpdateMatchDetail(ctx context.Context, id string, input model.UpdateMatchDetailInput) (*model.Match, error) {
	match, err := r.MatchService.UpdateDetail(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatMatchResponse(match), nil
}

// UpdateMatchResult is the resolver for the updateMatchResult field.
func (r *mutationResolver) UpdateMatchResult(ctx context.Context, id string, input model.UpdateMatchResultInput) (*model.Match, error) {
	match, err := r.MatchService.UpdateResult(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatMatchResponse(match), nil
}

// DeleteMatch is the resolver for the deleteMatch field.
func (r *mutationResolver) DeleteMatch(ctx context.Context, id string) (*model.Match, error) {
	match, err := r.MatchService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatMatchResponse(match), nil
}

// AddMatchEntries is the resolver for the addMatchEntries field.
func (r *mutationResolver) AddMatchEntries(ctx context.Context, id string, input model.UpdateMatchEntriesInput) (*model.Match, error) {
	match, err := r.MatchService.AddEntries(ctx, id, input.TeamIds)
	if err != nil {
		return nil, err
	}
	return model.FormatMatchResponse(match), nil
}

// DeleteMatchEntries is the resolver for the deleteMatchEntries field.
func (r *mutationResolver) DeleteMatchEntries(ctx context.Context, id string, input model.UpdateMatchEntriesInput) (*model.Match, error) {
	match, err := r.MatchService.DeleteEntries(ctx, id, input.TeamIds)
	if err != nil {
		return nil, err
	}
	return model.FormatMatchResponse(match), nil
}

// UpdateJudgment is the resolver for the updateJudgment field.
func (r *mutationResolver) UpdateJudgment(ctx context.Context, id string, input model.UpdateJudgmentInput) (*model.Judgment, error) {
	judgment, err := r.JudgmentService.Update(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.FormatJudgmentResponse(judgment), nil
}

// CreateLeague is the resolver for the createLeague field.
func (r *mutationResolver) CreateLeague(ctx context.Context, input model.CreateLeagueInput) (*model.League, error) {
	panic(fmt.Errorf("not implemented: CreateLeague - createLeague"))
}

// UpdateLeagueRule is the resolver for the updateLeagueRule field.
func (r *mutationResolver) UpdateLeagueRule(ctx context.Context, id string, input model.UpdateLeagueRuleInput) (*model.League, error) {
	panic(fmt.Errorf("not implemented: UpdateLeagueRule - updateLeagueRule"))
}

// DeleteLeague is the resolver for the deleteLeague field.
func (r *mutationResolver) DeleteLeague(ctx context.Context, id string) (*model.League, error) {
	panic(fmt.Errorf("not implemented: DeleteLeague - deleteLeague"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.User, 0, len(users))
	for _, user := range users {
		res = append(res, model.FormatUserResponse(user))
	}
	return res, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.UserService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatUserResponse(user), nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user, err := r.AuthService.GetCurrentUser(ctx)
	if err != nil {
		return nil, err
	}
	return model.FormatUserResponse(user), nil
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*model.Group, error) {
	groups, err := r.GroupService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Group, 0, len(groups))
	for _, group := range groups {
		res = append(res, model.FormatGroupResponse(group))
	}
	return res, nil
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*model.Group, error) {
	group, err := r.GroupService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatGroupResponse(group), nil
}

// Sports is the resolver for the sports field.
func (r *queryResolver) Sports(ctx context.Context) ([]*model.Sport, error) {
	sports, err := r.SportService.List(ctx)
	if err != nil {
		return nil, err
	}
	res := make([]*model.Sport, 0, len(sports))
	for _, sport := range sports {
		res = append(res, model.FormatSportResponse(sport))
	}
	return res, nil
}

// Sport is the resolver for the sport field.
func (r *queryResolver) Sport(ctx context.Context, id string) (*model.Sport, error) {
	sport, err := r.SportService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatSportResponse(sport), nil
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context) ([]*model.Team, error) {
	teams, err := r.TeamService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Team, 0, len(teams))
	for _, team := range teams {
		res = append(res, model.FormatTeamResponse(team))
	}
	return res, nil
}

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, id string) (*model.Team, error) {
	team, err := r.TeamService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatTeamResponse(team), nil
}

// Locations is the resolver for the locations field.
func (r *queryResolver) Locations(ctx context.Context) ([]*model.Location, error) {
	locations, err := r.LocationService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Location, 0, len(locations))
	for _, location := range locations {
		res = append(res, model.FormatLocationResponse(location))
	}
	return res, nil
}

// Location is the resolver for the location field.
func (r *queryResolver) Location(ctx context.Context, id string) (*model.Location, error) {
	location, err := r.LocationService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatLocationResponse(location), nil
}

// Scenes is the resolver for the scenes field.
func (r *queryResolver) Scenes(ctx context.Context) ([]*model.Scene, error) {
	scenes, err := r.SceneService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Scene, 0, len(scenes))
	for _, scene := range scenes {
		res = append(res, model.FormatSceneResponse(scene))
	}
	return res, nil
}

// Scene is the resolver for the scene field.
func (r *queryResolver) Scene(ctx context.Context, id string) (*model.Scene, error) {
	scene, err := r.SceneService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatSceneResponse(scene), nil
}

// Informations is the resolver for the Informations field.
func (r *queryResolver) Informations(ctx context.Context) ([]*model.Information, error) {
	informations, err := r.InformationService.GetAll(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Information, 0, len(informations))
	for _, information := range informations {
		res = append(res, model.FormatInformationResponse(information))
	}
	return res, nil
}

// Information is the resolver for the Information field.
func (r *queryResolver) Information(ctx context.Context, id string) (*model.Information, error) {
	information, err := r.InformationService.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatInformationResponse(information), nil
}

// Competitions is the resolver for the competitions field.
func (r *queryResolver) Competitions(ctx context.Context) ([]*model.Competition, error) {
	competitions, err := r.CompetitionService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Competition, 0, len(competitions))
	for _, competition := range competitions {
		res = append(res, model.FormatCompetitionResponse(competition))
	}
	return res, nil
}

// Competition is the resolver for the competition field.
func (r *queryResolver) Competition(ctx context.Context, id string) (*model.Competition, error) {
	competition, err := r.CompetitionService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatCompetitionResponse(competition), nil
}

// Matches is the resolver for the matches field.
func (r *queryResolver) Matches(ctx context.Context) ([]*model.Match, error) {
	matches, err := r.MatchService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Match, 0, len(matches))
	for _, match := range matches {
		res = append(res, model.FormatMatchResponse(match))
	}
	return res, nil
}

// Match is the resolver for the match field.
func (r *queryResolver) Match(ctx context.Context, id string) (*model.Match, error) {
	match, err := r.MatchService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatMatchResponse(match), nil
}

// Judgments is the resolver for the judgments field.
func (r *queryResolver) Judgments(ctx context.Context) ([]*model.Judgment, error) {
	judgments, err := r.JudgmentService.List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Judgment, 0, len(judgments))
	for _, judgment := range judgments {
		res = append(res, model.FormatJudgmentResponse(judgment))
	}
	return res, nil
}

// Judgment is the resolver for the judgment field.
func (r *queryResolver) Judgment(ctx context.Context, id string) (*model.Judgment, error) {
	judgment, err := r.JudgmentService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.FormatJudgmentResponse(judgment), nil
}

// Leagues is the resolver for the leagues field.
func (r *queryResolver) Leagues(ctx context.Context) ([]*model.League, error) {
	panic(fmt.Errorf("not implemented: Leagues - leagues"))
}

// League is the resolver for the league field.
func (r *queryResolver) League(ctx context.Context, id string) (*model.League, error) {
	panic(fmt.Errorf("not implemented: League - league"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
