type User {
  id: ID!
  name: String!
  email: String!
  groups: [Group!]!
  teams: [Team!]!
  createdAt: String!
  updatedAt: String!
}

type Group {
  id: ID!
  name: String!
  users: [User!]!
  createdAt: String!
  updatedAt: String!
}

type Team {
  id: ID!
  name: String!
  users: [User!]!
  group: Group
  createdAt: String!
  updatedAt: String!
}

type Query {
  users: [User!]!
  user(id: ID!): User
  userByEmail(email: String!): User
  groups: [Group!]!
  group(id: ID!): Group
  teams: [Team!]!
  team(id: ID!): Team
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  createGroup(input: CreateGroupInput!): Group!
  updateGroup(id: ID!, input: UpdateGroupInput!): Group!
  deleteGroup(id: ID!): Boolean!
  addUserToGroup(userId: ID!, groupId: ID!): Group!
  removeUserFromGroup(userId: ID!, groupId: ID!): Group!
  createTeam(input: CreateTeamInput!): Team!
  updateTeam(id: ID!, input: UpdateTeamInput!): Team!
  deleteTeam(id: ID!): Boolean!
  addUserToTeam(userId: ID!, teamId: ID!): Team!
  removeUserFromTeam(userId: ID!, teamId: ID!): Team!
}

input CreateUserInput {
  name: String!
  email: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreateGroupInput {
  name: String!
}

input UpdateGroupInput {
  name: String
}

input CreateTeamInput {
  name: String!
  groupId: ID
}

input UpdateTeamInput {
  name: String
  groupId: ID
}
